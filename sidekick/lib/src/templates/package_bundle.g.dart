// GENERATED CODE - DO NOT MODIFY BY HAND
// ignore_for_file: prefer_single_quotes, public_member_api_docs, lines_longer_than_80_chars, implicit_dynamic_list_literal, implicit_dynamic_map_literal

import 'package:mason/mason.dart';

final packageBundle = MasonBundle.fromJson(<String, dynamic>{
  "files": [
    {
      "path": ".gitignore",
      "data":
          "IyBGaWxlcyBhbmQgZGlyZWN0b3JpZXMgY3JlYXRlZCBieSBwdWIKLmRhcnRfdG9vbC8KLnBhY2thZ2VzCgojIENvbnZlbnRpb25hbCBkaXJlY3RvcnkgZm9yIGJ1aWxkIG91dHB1dHMKYnVpbGQvCgojIERpcmVjdG9yeSBjcmVhdGVkIGJ5IGRhcnRkb2MKZG9jL2FwaS8K",
      "type": "text"
    },
    {
      "path": "analysis_options.yaml",
      "data":
          "aW5jbHVkZTogcGFja2FnZTpsaW50L2FuYWx5c2lzX29wdGlvbnMueWFtbAoKbGludGVyOgogIHJ1bGVzOgogICAgYXZvaWRfcHJpbnQ6IGZhbHNl",
      "type": "text"
    },
    {
      "path": "bin/main.dart",
      "data":
          "aW1wb3J0ICdwYWNrYWdlOnt7bmFtZX19X3NpZGVraWNrL3t7bmFtZX19X3NpZGVraWNrLmRhcnQnOwoKRnV0dXJlPHZvaWQ+IG1haW4oTGlzdDxTdHJpbmc+IGFyZ3VtZW50cykgYXN5bmMgewogIGF3YWl0IHJ1bnt7I3RpdGxlQ2FzZX19e3tuYW1lfX17ey90aXRsZUNhc2V9fShhcmd1bWVudHMpOwp9Cg==",
      "type": "text"
    },
    {
      "path": "lib/src/commands/deps_command.dart",
      "data":
          "aW1wb3J0ICdwYWNrYWdlOnt7I2xvd2VyQ2FzZX19e3tuYW1lfX17ey9sb3dlckNhc2V9fV9zaWRla2ljay97eyNsb3dlckNhc2V9fXt7bmFtZX19e3svbG93ZXJDYXNlfX1fc2lkZWtpY2suZGFydCc7CmltcG9ydCAncGFja2FnZTpzaWRla2lja19jb3JlL3NpZGVraWNrX2NvcmUuZGFydCc7CgpjbGFzcyBEZXBzQ29tbWFuZCBleHRlbmRzIENvbW1hbmQgewogIEBvdmVycmlkZQogIGZpbmFsIFN0cmluZyBkZXNjcmlwdGlvbiA9ICdHZXRzIGRlcGVuZGVuY2llcyBmb3IgYWxsIHBhY2thZ2VzJzsKCiAgQG92ZXJyaWRlCiAgZmluYWwgU3RyaW5nIG5hbWUgPSAnZGVwcyc7CgogIERlcHNDb21tYW5kKCkgewogICAgYXJnUGFyc2VyLmFkZE9wdGlvbigKICAgICAgJ3BhY2thZ2UnLAogICAgICBhYmJyOiAncCcsCiAgICAgIGFsbG93ZWQ6IHt7I2xvd2VyQ2FzZX19e3tuYW1lfX17ey9sb3dlckNhc2V9fVByb2plY3QuYWxsUGFja2FnZXMubWFwKChpdCkgPT4gaXQubmFtZSksCiAgICApOwogIH0KCiAgQG92ZXJyaWRlCiAgRnV0dXJlPHZvaWQ+IHJ1bigpIGFzeW5jIHsKICAgIGZpbmFsIFN0cmluZz8gcGFja2FnZUFyZyA9IGFyZ1Jlc3VsdHM/WydwYWNrYWdlJ10gYXMgU3RyaW5nPzsKCiAgICBpZiAocGFja2FnZUFyZyAhPSBudWxsKSB7CiAgICAgIC8vIG9ubHkgZ2V0IGRlcHMgZm9yIHNlbGVjdGVkIHBhY2thZ2UKICAgICAgX2dldERlcGVuZGVuY2llc0ZvclBhY2thZ2VXaXRoTmFtZShwYWNrYWdlQXJnKTsKICAgICAgcmV0dXJuOwogICAgfQoKICAgIC8vIGZhbGxiYWNrIHRvIGFsbCBwYWNrYWdlcwogICAgZm9yIChmaW5hbCBwYWNrYWdlIGluIHt7I2xvd2VyQ2FzZX19e3tuYW1lfX17ey9sb3dlckNhc2V9fVByb2plY3QuYWxsUGFja2FnZXMpIHsKICAgICAgX2dldERlcGVuZGVuY2llcyhwYWNrYWdlKTsKICAgIH0KICB9CgogIHZvaWQgX2dldERlcGVuZGVuY2llc0ZvclBhY2thZ2VXaXRoTmFtZShTdHJpbmcgbmFtZSkgewogICAgLy8gb25seSBnZXQgZGVwcyBmb3Igc2VsZWN0ZWQgcGFja2FnZQogICAgZmluYWwgcGFja2FnZSA9IHt7I2xvd2VyQ2FzZX19e3tuYW1lfX17ey9sb3dlckNhc2V9fVByb2plY3QuYWxsUGFja2FnZXMuZmlyc3RPck51bGxXaGVyZSgoaXQpID0+IGl0Lm5hbWUgPT0gbmFtZSk7CiAgICBpZiAocGFja2FnZSA9PSBudWxsKSB7CiAgICAgIGZpbmFsIHBhY2thZ2VPcHRpb25zID0ge3sjbG93ZXJDYXNlfX17e25hbWV9fXt7L2xvd2VyQ2FzZX19UHJvamVjdC5hbGxQYWNrYWdlcy5tYXAoKGl0KSA9PiBpdC5uYW1lKS50b0xpc3QoZ3Jvd2FibGU6IGZhbHNlKTsKICAgICAgZXJyb3IoJ0NvdWxkIG5vdCBmaW5kIHBhY2thZ2UgJG5hbWUuICcKICAgICAgICAgICdQbGVhc2UgdXNlIG9uZSBvZiAke3BhY2thZ2VPcHRpb25zLmpvaW5Ub1N0cmluZygpfScpOwogICAgfQogICAgX2dldERlcGVuZGVuY2llcyhwYWNrYWdlKTsKICB9CgogIHZvaWQgX2dldERlcGVuZGVuY2llcyhEYXJ0UGFja2FnZSBwYWNrYWdlKSB7CiAgICBwcmludCh5ZWxsb3coJz09PSBwYWNrYWdlICR7cGFja2FnZS5uYW1lfSA9PT0nKSk7CiAgICBpZiAocGFja2FnZS5pc0ZsdXR0ZXJQYWNrYWdlKSB7CiAgICAgIGZsdXR0ZXJ3KFsncGFja2FnZXMnLCAnZ2V0J10sIHdvcmtpbmdEaXJlY3Rvcnk6IHBhY2thZ2Uucm9vdCk7CiAgICB9IGVsc2UgewogICAgICBkYXJ0KFsncHViJywgJ2dldCddLCB3b3JraW5nRGlyZWN0b3J5OiBwYWNrYWdlLnJvb3QpOwogICAgfQogICAgcHJpbnQoIlxuIik7CiAgfQp9Cg==",
      "type": "text"
    },
    {
      "path": "lib/src/commands/plugins_command.dart",
      "data":
          "",
      "type": "text"
    },
    {
      "path": "lib/src/commands/recompile_command.dart",
      "data":
          "aW1wb3J0ICdkYXJ0OmlvJzsKCmltcG9ydCAncGFja2FnZTphcmdzL2NvbW1hbmRfcnVubmVyLmRhcnQnOwppbXBvcnQgJ3BhY2thZ2U6ZGNsaS9kY2xpLmRhcnQnIGFzIGRjbGk7CmltcG9ydCAncGFja2FnZTp7eyNsb3dlckNhc2V9fXt7bmFtZX19e3svbG93ZXJDYXNlfX1fc2lkZWtpY2sve3sjbG93ZXJDYXNlfX17e25hbWV9fXt7L2xvd2VyQ2FzZX19X3NpZGVraWNrLmRhcnQnOwppbXBvcnQgJ3BhY2thZ2U6c2lkZWtpY2tfY29yZS9zaWRla2lja19jb3JlLmRhcnQnOwoKY2xhc3MgUmVjb21waWxlQ29tbWFuZCBleHRlbmRzIENvbW1hbmQgewogIEBvdmVycmlkZQogIGZpbmFsIFN0cmluZyBkZXNjcmlwdGlvbiA9ICdSZWNvbXBpbGVzIHRoZSB7eyNsb3dlckNhc2V9fXt7bmFtZX19e3svbG93ZXJDYXNlfX0gc2lkZWtpY2sgQ0xJJzsKCiAgQG92ZXJyaWRlCiAgZmluYWwgU3RyaW5nIG5hbWUgPSAncmVjb21waWxlJzsKCiAgQG92ZXJyaWRlCiAgRnV0dXJlPHZvaWQ+IHJ1bigpIGFzeW5jIHsKICAgIGZpbmFsIGluc3RhbGxTY3JpcHQgPSB7eyNsb3dlckNhc2V9fXt7bmFtZX19e3svbG93ZXJDYXNlfX1Qcm9qZWN0LnJvb3QuZmlsZSgncGFja2FnZXMve3sjbG93ZXJDYXNlfX17e25hbWV9fXt7L2xvd2VyQ2FzZX19X3NpZGVraWNrL3Rvb2wvaW5zdGFsbC5zaCcpOwogICAgZmluYWwgcHJvY2VzcyA9IGRjbGkuc3RhcnQoaW5zdGFsbFNjcmlwdC5wYXRoLCBub3Rocm93OiB0cnVlLCB0ZXJtaW5hbDogdHJ1ZSk7CiAgICBleGl0KHByb2Nlc3MuZXhpdENvZGUgPz8gMCk7CiAgfQp9Cg==",
      "type": "text"
    },
    {
      "path": "lib/src/{{#lowerCase}}{{name}}{{/lowerCase}}_project.dart",
      "data":
          "aW1wb3J0ICdwYWNrYWdlOnNpZGVraWNrX2NvcmUvc2lkZWtpY2tfY29yZS5kYXJ0JzsKCnt7I21haW5Qcm9qZWN0SXNSb290fX1jbGFzcyB7eyN0aXRsZUNhc2V9fXt7bmFtZX19e3svdGl0bGVDYXNlfX1Qcm9qZWN0IGV4dGVuZHMgRGFydFBhY2thZ2UgewogIGZhY3Rvcnkge3sjdGl0bGVDYXNlfX17e25hbWV9fXt7L3RpdGxlQ2FzZX19UHJvamVjdChEaXJlY3Rvcnkgcm9vdCkgewogICAgZmluYWwgcGFja2FnZSA9IERhcnRQYWNrYWdlLmZyb21EaXJlY3Rvcnkocm9vdCkhOwogICAgcmV0dXJuIHt7I3RpdGxlQ2FzZX19e3tuYW1lfX17ey90aXRsZUNhc2V9fVByb2plY3QuXyhwYWNrYWdlLnJvb3QsIHBhY2thZ2UubmFtZSk7CiAgfQoKICB7eyN0aXRsZUNhc2V9fXt7bmFtZX19e3svdGl0bGVDYXNlfX1Qcm9qZWN0Ll8oRGlyZWN0b3J5IHJvb3QsIFN0cmluZyBuYW1lKSA6IHN1cGVyLmZsdXR0ZXIocm9vdCwgbmFtZSk7Cnt7L21haW5Qcm9qZWN0SXNSb290fX17e15tYWluUHJvamVjdElzUm9vdH19CmNsYXNzIHt7I3RpdGxlQ2FzZX19e3tuYW1lfX17ey90aXRsZUNhc2V9fVByb2plY3QgewogIHt7I3RpdGxlQ2FzZX19e3tuYW1lfX17ey90aXRsZUNhc2V9fVByb2plY3QodGhpcy5yb290KTsKCiAgZmluYWwgRGlyZWN0b3J5IHJvb3Q7e3svbWFpblByb2plY3RJc1Jvb3R9fQogIC8vLyBwYWNrYWdlcwoKICBGaWxlIGdldCBmbHV0dGVydyA9PiByb290LmZpbGUoJ2ZsdXR0ZXJ3Jyk7CgogIExpc3Q8RGFydFBhY2thZ2U+PyBfcGFja2FnZXM7CiAgTGlzdDxEYXJ0UGFja2FnZT4gZ2V0IGFsbFBhY2thZ2VzIHsKICAgIHJldHVybiBfcGFja2FnZXMgPz89IHJvb3R7eyNoYXNOZXN0ZWRQYWNrYWdlc1BhdGh9fQogICAgICAgIC5kaXJlY3RvcnkoJ3t7e21haW5Qcm9qZWN0UGF0aH19fScpe3svaGFzTmVzdGVkUGFja2FnZXNQYXRofX0KICAgICAgICAuZGlyZWN0b3J5KCdwYWNrYWdlcycpCiAgICAgICAgLmxpc3RTeW5jKCkKICAgICAgICAud2hlcmVUeXBlPERpcmVjdG9yeT4oKQogICAgICAgIC5tYXBOb3ROdWxsKChpdCkgPT4gRGFydFBhY2thZ2UuZnJvbURpcmVjdG9yeShpdCkpCiAgICAgICAgLnRvTGlzdCgpe3tebWFpblByb2plY3RJc1Jvb3R9fTt7ey9tYWluUHJvamVjdElzUm9vdH19CiAgICAgIHt7I21haW5Qcm9qZWN0SXNSb290fX0uLmFkZCh0aGlzKTt7ey9tYWluUHJvamVjdElzUm9vdH19CiAgfQp9Cg==",
      "type": "text"
    },
    {
      "path": "lib/{{#lowerCase}}{{name}}{{/lowerCase}}_sidekick.dart",
      "data":
          "aW1wb3J0ICdkYXJ0OmFzeW5jJzsKCmltcG9ydCAncGFja2FnZTp7eyNsb3dlckNhc2V9fXt7bmFtZX19e3svbG93ZXJDYXNlfX1fc2lkZWtpY2svc3JjL2NvbW1hbmRzL2RlcHNfY29tbWFuZC5kYXJ0JzsKaW1wb3J0ICdwYWNrYWdlOnt7I2xvd2VyQ2FzZX19e3tuYW1lfX17ey9sb3dlckNhc2V9fV9zaWRla2ljay9zcmMvY29tbWFuZHMvcGx1Z2luc19jb21tYW5kLmRhcnQnOwppbXBvcnQgJ3BhY2thZ2U6e3sjbG93ZXJDYXNlfX17e25hbWV9fXt7L2xvd2VyQ2FzZX19X3NpZGVraWNrL3NyYy9jb21tYW5kcy9yZWNvbXBpbGVfY29tbWFuZC5kYXJ0JzsKaW1wb3J0ICdwYWNrYWdlOnt7I2xvd2VyQ2FzZX19e3tuYW1lfX17ey9sb3dlckNhc2V9fV9zaWRla2ljay9zcmMve3sjbG93ZXJDYXNlfX17e25hbWV9fXt7L2xvd2VyQ2FzZX19X3Byb2plY3QuZGFydCc7CmltcG9ydCAncGFja2FnZTpzaWRla2lja19jb3JlL3NpZGVraWNrX2NvcmUuZGFydCc7CgpsYXRlIHt7I3RpdGxlQ2FzZX19e3tuYW1lfX17ey90aXRsZUNhc2V9fVByb2plY3Qge3sjbG93ZXJDYXNlfX17e25hbWV9fXt7L2xvd2VyQ2FzZX19UHJvamVjdDsKCkZ1dHVyZTx2b2lkPiBydW57eyN0aXRsZUNhc2V9fXt7bmFtZX19e3svdGl0bGVDYXNlfX0oTGlzdDxTdHJpbmc+IGFyZ3MpIGFzeW5jIHsKICBmaW5hbCBydW5uZXIgPSBpbml0aWFsaXplU2lkZWtpY2soCiAgICBuYW1lOiAne3tuYW1lfX0nLAogICAge3sjaGFzTWFpblByb2plY3R9fW1haW5Qcm9qZWN0UGF0aDogJ3t7e21haW5Qcm9qZWN0UGF0aH19fScse3svaGFzTWFpblByb2plY3R9fQogICk7CgogIHt7Xm1haW5Qcm9qZWN0SXNSb290fX17eyNsb3dlckNhc2V9fXt7bmFtZX19e3svbG93ZXJDYXNlfX1Qcm9qZWN0ID0ge3sjdGl0bGVDYXNlfX17e25hbWV9fXt7L3RpdGxlQ2FzZX19UHJvamVjdChydW5uZXIucmVwb3NpdG9yeS5yb290KTt7ey9tYWluUHJvamVjdElzUm9vdH19CiAge3sjbWFpblByb2plY3RJc1Jvb3R9fXt7I2xvd2VyQ2FzZX19e3tuYW1lfX17ey9sb3dlckNhc2V9fVByb2plY3QgPSB7eyN0aXRsZUNhc2V9fXt7bmFtZX19e3svdGl0bGVDYXNlfX1Qcm9qZWN0KHJ1bm5lci5tYWluUHJvamVjdCEucm9vdCk7e3svbWFpblByb2plY3RJc1Jvb3R9fQogIHJ1bm5lcgogICAgLi5hZGRDb21tYW5kKFJlY29tcGlsZUNvbW1hbmQoKSkKICAgIC4uYWRkQ29tbWFuZChGbHV0dGVyQ29tbWFuZCgpKQogICAgLi5hZGRDb21tYW5kKERhcnRDb21tYW5kKCkpCiAgICAuLmFkZENvbW1hbmQoRGVwc0NvbW1hbmQoKSkKICAgIC4uYWRkQ29tbWFuZChQbHVnaW5zQ29tbWFuZCgpKQogICAgLi5hZGRDb21tYW5kKEluc3RhbGxHbG9iYWxDb21tYW5kKCkpCiAgICAuLmFkZENvbW1hbmQoRGFydEFuYWx5emVDb21tYW5kKCkpOwoKICBpZiAoYXJncy5pc0VtcHR5KSB7CiAgICBwcmludChydW5uZXIudXNhZ2UpOwogICAgcmV0dXJuOwogIH0KCiAgdHJ5IHsKICAgIHJldHVybiBhd2FpdCBydW5uZXIucnVuKGFyZ3MpOwogIH0gb24gVXNhZ2VFeGNlcHRpb24gY2F0Y2ggKGUpIHsKICAgIHByaW50KGUudXNhZ2UpOwogICAgZXhpdCg2NCk7IC8vIHVzYWdlIGVycm9yCiAgfQp9Cg==",
      "type": "text"
    },
    {
      "path": "pubspec.yaml",
      "data":
          "bmFtZToge3tuYW1lfX1fc2lkZWtpY2sKZGVzY3JpcHRpb246IFNpZGVraWNrIENMSSBmb3Ige3tuYW1lfX0KdmVyc2lvbjogMC4wLjEKcHVibGlzaF90bzogbm9uZQoKZW52aXJvbm1lbnQ6CiAgc2RrOiAnPj0yLjE0LjAgPDMuMC4wJwoKZXhlY3V0YWJsZXM6CiAgbWFpbjoKCmRlcGVuZGVuY2llczoKICBjc3Y6IF41LjAuMAogIGludGw6IF4wLjE3LjAKICBzaWRla2lja19jb3JlOiBeMC42LjAKICB0aW1lYWdvOiBeMy4wLjIKICAjIFRPRE8gcmVtb3ZlIGdpdCBkZXBlbmRlbmN5LCBjb3B5IG5lZWRlZCBjb2RlIGZyb20gcHViIGluc3RlYWQKICBwdWI6CiAgICBnaXQ6IGh0dHBzOi8vZ2l0aHViLmNvbS9HaXVzcGVwZS9wdWIKCmRldl9kZXBlbmRlbmNpZXM6CiAgbGludDogXjEuNS4zCg==",
      "type": "text"
    },
    {
      "path": "tool/download_dart.sh",
      "data":
          "IyEvdXNyL2Jpbi9lbnYgYmFzaAoKIyBEb3dubG9hZHMgdGhlIGRhcnQgc2RrIGludG8gdGhlIHNpZGVraWNrIGJ1aWxkIGZvbGRlci4KIyBIYW5kbGVzIGNhY2hpbmcgdG8gbWluaW1pemUgbmV0d29yayB0cmFmZmljCgojIEhpZ2hseSBpbnNwaXJlZCBieSBodHRwczovL2dpdGh1Yi5jb20vZmx1dHRlci9mbHV0dGVyL2Jsb2IvYjdiOGI3NTliYzNhYjdhODBkMjU3NmQ1MmY3YjA1YmMxZTZlMjNiZC9iaW4vaW50ZXJuYWwvdXBkYXRlX2RhcnRfc2RrLnNoCgoKc2V0IC1lCgpTSURFS0lDS19QQUNLQUdFX1JPT1Q9IiQoZGlybmFtZSAiJChkaXJuYW1lICIkKGRpcm5hbWUgIiR7QkFTSF9TT1VSQ0VbMF19IikiKSIpIgoKU0lERUtJQ0tfREFSVF9TREtfUEFUSD0iJFNJREVLSUNLX1BBQ0tBR0VfUk9PVC9idWlsZC9jYWNoZS9kYXJ0LXNkayIKREFSVF9TREtfWklQX0ZPTERFUj0iJEhPTUUvLmRhcnQvc2RrL2NhY2hlIgpEQVJUX1ZFUlNJT049IjIuMTguMiIKREFSVF9WRVJTSU9OX1NUQU1QPSIkU0lERUtJQ0tfUEFDS0FHRV9ST09UL2J1aWxkL2NhY2hlL2RhcnRzZGsuc3RhbXAiCk9TPSIkKHVuYW1lIC1zKSIKCmlmIFsgISAtZiAiJERBUlRfVkVSU0lPTl9TVEFNUCIgXSB8fCBbICIkREFSVF9WRVJTSU9OIiAhPSBgY2F0ICIkREFSVF9WRVJTSU9OX1NUQU1QImAgXTsgdGhlbgogIGNvbW1hbmQgLXYgY3VybCA+IC9kZXYvbnVsbCAyPiYxIHx8IHsKICAgID4mMiBlY2hvCiAgICA+JjIgZWNobyAnTWlzc2luZyAiY3VybCIgdG9vbC4gVW5hYmxlIHRvIGRvd25sb2FkIERhcnQgU0RLLicKICAgIGNhc2UgIiRPUyIgaW4KICAgICAgRGFyd2luKQogICAgICAgID4mMiBlY2hvICdDb25zaWRlciBydW5uaW5nICJicmV3IGluc3RhbGwgY3VybCIuJwogICAgICAgIDs7CiAgICAgIExpbnV4KQogICAgICAgID4mMiBlY2hvICdDb25zaWRlciBydW5uaW5nICJzdWRvIGFwdC1nZXQgaW5zdGFsbCBjdXJsIi4nCiAgICAgICAgOzsKICAgICAgKikKICAgICAgICA+JjIgZWNobyAiUGxlYXNlIGluc3RhbGwgY3VybC4iCiAgICAgICAgOzsKICAgIGVzYWMKICAgIGVjaG8KICAgIGV4aXQgMQogIH0KICBjb21tYW5kIC12IHVuemlwID4gL2Rldi9udWxsIDI+JjEgfHwgewogICAgPiYyIGVjaG8KICAgID4mMiBlY2hvICdNaXNzaW5nICJ1bnppcCIgdG9vbC4gVW5hYmxlIHRvIGV4dHJhY3QgRGFydCBTREsuJwogICAgY2FzZSAiJE9TIiBpbgogICAgICBEYXJ3aW4pCiAgICAgICAgZWNobyAnQ29uc2lkZXIgcnVubmluZyAiYnJldyBpbnN0YWxsIHVuemlwIi4nCiAgICAgICAgOzsKICAgICAgTGludXgpCiAgICAgICAgZWNobyAnQ29uc2lkZXIgcnVubmluZyAic3VkbyBhcHQtZ2V0IGluc3RhbGwgdW56aXAiLicKICAgICAgICA7OwogICAgICAqKQogICAgICAgIGVjaG8gIlBsZWFzZSBpbnN0YWxsIHVuemlwLiIKICAgICAgICA7OwogICAgZXNhYwogICAgZWNobwogICAgZXhpdCAxCiAgfQoKICAjIGB1bmFtZSAtbWAgbWF5IGJlIHJ1bm5pbmcgaW4gUm9zZXR0YSBtb2RlLCBpbnN0ZWFkIHF1ZXJ5IHN5c2N0bAogIGlmIFsgIiRPUyIgPSAnRGFyd2luJyBdOyB0aGVuCiAgICAjIEFsbG93IG5vbi16ZXJvIGV4aXQgc28gd2UgY2FuIGRvIGNvbnRyb2wgZmxvdwogICAgc2V0ICtlCiAgICAjIC1uIG1lYW5zIG9ubHkgcHJpbnQgdmFsdWUsIG5vdCBrZXkKICAgIFFVRVJZPSJzeXNjdGwgLW4gaHcub3B0aW9uYWwuYXJtNjQiCiAgICAjIERvIG5vdCB3cmFwICRRVUVSWSBpbiBkb3VibGUgcXVvdGVzLCBvdGhlcndpc2UgdGhlIGFyZ3Mgd2lsbCBiZSB0cmVhdGVkIGFzCiAgICAjIHBhcnQgb2YgdGhlIGNvbW1hbmQKICAgIFFVRVJZX1JFU1VMVD0kKCRRVUVSWSAyPi9kZXYvbnVsbCkKICAgIGlmIFsgJD8gLWVxIDEgXTsgdGhlbgogICAgICAjIElmIHRoaXMgY29tbWFuZCBmYWlscywgd2UncmUgY2VydGFpbmx5IG5vdCBvbiBBUk0KICAgICAgQVJDSD0neDY0JwogICAgZWxpZiBbICIkUVVFUllfUkVTVUxUIiA9ICcwJyBdOyB0aGVuCiAgICAgICMgSWYgdGhpcyByZXR1cm5zIDAsIHdlIGFyZSBhbHNvIG5vdCBvbiBBUk0KICAgICAgQVJDSD0neDY0JwogICAgZWxpZiBbICIkUVVFUllfUkVTVUxUIiA9ICcxJyBdOyB0aGVuCiAgICAgIEFSQ0g9J2FybTY0JwogICAgZWxzZQogICAgICA+JjIgZWNobyAiJyRRVUVSWScgcmV0dXJuZWQgdW5leHBlY3RlZCBvdXRwdXQ6ICckUVVFUllfUkVTVUxUJyIKICAgICAgZXhpdCAxCiAgICBmaQogICAgc2V0IC1lCiAgZWxzZQogICAgIyBPbiB4NjQgc3Rkb3V0IGlzICJ1bmFtZSAtbTogeDg2XzY0IgogICAgIyBPbiBhcm02NCBzdGRvdXQgaXMgInVuYW1lIC1tOiBhYXJjaDY0LCBhcm02NF92OGEiCiAgICBjYXNlICIkKHVuYW1lIC1tKSIgaW4KICAgICAgeDg2XzY0KQogICAgICAgIEFSQ0g9Ing2NCIKICAgICAgICA7OwogICAgICAqKQogICAgICAgIEFSQ0g9ImFybTY0IgogICAgICAgIDs7CiAgICBlc2FjCiAgZmkKCiAgY2FzZSAiJE9TIiBpbgogICAgRGFyd2luKQogICAgICBEQVJUX1pJUF9OQU1FPSJkYXJ0c2RrLW1hY29zLSR7QVJDSH0tcmVsZWFzZS56aXAiCiAgICAgIElTX1VTRVJfRVhFQ1VUQUJMRT0iLXBlcm0gKzEwMCIKICAgICAgOzsKICAgIExpbnV4KQogICAgICBEQVJUX1pJUF9OQU1FPSJkYXJ0c2RrLWxpbnV4LSR7QVJDSH0tcmVsZWFzZS56aXAiCiAgICAgIElTX1VTRVJfRVhFQ1VUQUJMRT0iLXBlcm0gL3UreCIKICAgICAgOzsKICAgIE1JTkdXKikKICAgICAgREFSVF9aSVBfTkFNRT0iZGFydHNkay13aW5kb3dzLSR7QVJDSH0tcmVsZWFzZS56aXAiCiAgICAgIElTX1VTRVJfRVhFQ1VUQUJMRT0iLXBlcm0gL3UreCIKICAgICAgOzsKICAgICopCiAgICAgIGVjaG8gIlVua25vd24gb3BlcmF0aW5nIHN5c3RlbS4gQ2Fubm90IGluc3RhbGwgRGFydCBTREsuIgogICAgICBleGl0IDEKICAgICAgOzsKICBlc2FjCgogICMgVXNlIHRoZSBkZWZhdWx0IGZpbmQgaWYgcG9zc2libGUuCiAgaWYgWyAtZSAvdXNyL2Jpbi9maW5kIF07IHRoZW4KICAgIEZJTkQ9L3Vzci9iaW4vZmluZAogIGVsc2UKICAgIEZJTkQ9ZmluZAogIGZpCgogIERBUlRfU0RLX0JBU0VfVVJMPSIke0dPT0dMRV9TVE9SQUdFX0JBU0VfVVJMOi1odHRwczovL3N0b3JhZ2UuZ29vZ2xlYXBpcy5jb219IgogIERBUlRfU0RLX1VSTD0iJERBUlRfU0RLX0JBU0VfVVJML2RhcnQtYXJjaGl2ZS9jaGFubmVscy9zdGFibGUvcmVsZWFzZS8kREFSVF9WRVJTSU9OL3Nkay8kREFSVF9aSVBfTkFNRSIKCiAgIyBpbnN0YWxsIHRoZSBuZXcgc2RrCiAgcm0gLXJmIC0tICIkU0lERUtJQ0tfREFSVF9TREtfUEFUSCIKICBta2RpciAtbSA3NTUgLXAgLS0gIiRTSURFS0lDS19EQVJUX1NES19QQVRIIgogIERBUlRfU0RLX1pJUD0iJERBUlRfU0RLX1pJUF9GT0xERVIvJERBUlRfWklQX05BTUUiCgogICMgQ3JlYXRlIGNhY2hlIGZvbGRlciB3aGVuIGl0IGRvZXNuJ3QgZXhpdHMKICBta2RpciAtcCAiJERBUlRfU0RLX1pJUF9GT0xERVIiCgogIGlmIFsgISAtZiAiJERBUlRfU0RLX1pJUCIgXTsgdGhlbgoKICAgID4mMiBlY2hvICJEb3dubG9hZGluZyAkT1MgJEFSQ0ggRGFydCBTREsgJERBUlRfVkVSU0lPTi4uLiIKCiAgICAjIERvd25sb2FkIHppcCB3aGVuIGl0J3Mgbm90IGluIGNhY2hlCiAgICBjdXJsIC0tcmV0cnkgMyAtLWNvbnRpbnVlLWF0IC0gLS1sb2NhdGlvbiAtLW91dHB1dCAiJERBUlRfU0RLX1pJUCIgIiREQVJUX1NES19VUkwiIDI+JjEgfHwgewogICAgICBjdXJsRXhpdENvZGU9JD8KICAgICAgIyBIYW5kbGUgcmFuZ2UgZXJyb3JzIHNwZWNpYWxseTogcmV0cnkgYWdhaW4gd2l0aCBkaXNhYmxlZCByYW5nZXMgKGAtLWNvbnRpbnVlLWF0IC1gIGFyZ3VtZW50KQogICAgICAjIFdoZW4gdGhpcyBjb3VsZCBoYXBwZW46CiAgICAgICMgLSBtaXNzaW5nIHN1cHBvcnQgb2YgcmFuZ2VzIGluIHByb3h5IHNlcnZlcnMKICAgICAgIyAtIGN1cmwgd2l0aCBicm9rZW4gaGFuZGxpbmcgb2YgY29tcGxldGVkIGRvd25sb2FkcwogICAgICAjICAgVGhpcyBpcyBub3QgYSBwcm9wZXIgZml4LCBidXQgZG9lc24ndCByZXF1aXJlIGFueSB1c2VyIGlucHV0CiAgICAgICMgLSBtaXJyb3Igb2YgZmx1dHRlciBzdG9yYWdlIHdpdGhvdXQgc3VwcG9ydCBvZiByYW5nZXMKICAgICAgIwogICAgICAjIDMzICBIVFRQIHJhbmdlIGVycm9yLiBUaGUgcmFuZ2UgImNvbW1hbmQiIGRpZG4ndCB3b3JrLgogICAgICAjIGh0dHBzOi8vbWFuNy5vcmcvbGludXgvbWFuLXBhZ2VzL21hbjEvY3VybC4xLmh0bWwjRVhJVF9DT0RFUwogICAgICBpZiBbICRjdXJsRXhpdENvZGUgIT0gMzMgXTsgdGhlbgogICAgICAgIHJldHVybiAkY3VybEV4aXRDb2RlCiAgICAgIGZpCiAgICAgIGN1cmwgLS1yZXRyeSAzIC0tbG9jYXRpb24gLS1vdXRwdXQgIiREQVJUX1NES19aSVAiICIkREFSVF9TREtfVVJMIiAyPiYxCiAgICB9IHx8IHsKICAgICAgPiYyIGVjaG8KICAgICAgPiYyIGVjaG8gIkZhaWxlZCB0byByZXRyaWV2ZSB0aGUgRGFydCBTREsgZnJvbTogJERBUlRfU0RLX1VSTCIKICAgICAgPiYyIGVjaG8KICAgICAgcm0gLWYgLS0gIiREQVJUX1NES19aSVAiCiAgICAgIGV4aXQgMQogICAgfQogIGVsc2UKICAgID4mMiBlY2hvICJVc2luZyBjYWNoZWQgRGFydCBTREsgJERBUlRfVkVSU0lPTiBmcm9tICREQVJUX1NES19aSVAuLi4iCiAgZmkKCiAgIyBFeHRyYWN0IHNkayB0byBidWlsZCBmb2xkZXIKICB1bnppcCAtbyAtcSAiJERBUlRfU0RLX1pJUCIgLWQgIiRTSURFS0lDS19QQUNLQUdFX1JPT1QvYnVpbGQvY2FjaGUiIHx8IHsKICAgID4mMiBlY2hvCiAgICA+JjIgZWNobyAiSXQgYXBwZWFycyB0aGF0IHRoZSBkb3dubG9hZGVkIGZpbGUgaXMgY29ycnVwdDsgcGxlYXNlIHRyeSBhZ2Fpbi4iCiAgICA+JjIgZWNobwogICAgcm0gLWYgLS0gIiREQVJUX1NES19aSVAiCiAgICBleGl0IDEKICB9CgogICRGSU5EICIkU0lERUtJQ0tfREFSVF9TREtfUEFUSCIgLXR5cGUgZCAtZXhlYyBjaG1vZCA3NTUge30gXDsKICAkRklORCAiJFNJREVLSUNLX0RBUlRfU0RLX1BBVEgiIC10eXBlIGYgJElTX1VTRVJfRVhFQ1VUQUJMRSAtZXhlYyBjaG1vZCBhK3gsYStyIHt9IFw7CiAgZWNobyAiJERBUlRfVkVSU0lPTiIgPiAiJERBUlRfVkVSU0lPTl9TVEFNUCIKZmkK",
      "type": "text"
    },
    {
      "path": "tool/install.sh",
      "data":
          "IyEvdXNyL2Jpbi9lbnYgYmFzaAoKQ1dEPSRQV0QKQ0xJX1BBQ0tBR0VfRElSPSQoZGlybmFtZSAiJChkaXJuYW1lICIkMCIpIikKCmNkICIke0NMSV9QQUNLQUdFX0RJUn0iIHx8IGV4aXQKCiAgZWNobyAiSW5zdGFsbGluZyB7e25hbWV9fSBjb21tYW5kIGxpbmUgYXBwbGljYXRpb24uLi4iCgogICMgZXhwb3J0IHB1YiBmcm9tIC5mbHV0dGVyIGRpcgogIFJFUE9fUk9PVD0kKGdpdCByZXYtcGFyc2UgLS1zaG93LWNkdXApCiAgREFSVF9TREs9IiR7Q0xJX1BBQ0tBR0VfRElSfS9idWlsZC9jYWNoZS9kYXJ0LXNkayIKICBEQVJUPSIkREFSVF9TREsvYmluL2RhcnQiIAoKICAjIElmIHdlJ3JlIG9uIFdpbmRvd3MsIGludm9rZSB0aGUgYmF0Y2ggc2NyaXB0IGluc3RlYWQKICBPUz0iJCh1bmFtZSAtcykiCiAgaWYgW1sgJE9TID1+IE1JTkdXLiogfHwgJE9TID1+IENZR1dJTi4qIF1dOyB0aGVuCiAgICBEQVJUPSIkREFSVF9TREsvYmluL2RhcnQuZXhlIgogIGZpCgogICMgRG93bmxvYWQgRGFydCBydW50aW1lCiAgaWYgWyAhIC1kICIkREFSVF9TREsiIF07IHRoZW4KICAgIGVjaG8gJ21pc3NpbmcgZmx1dHRlciBzZGsnCiAgICBzaCAiJHtDTElfUEFDS0FHRV9ESVJ9L3Rvb2wvZG93bmxvYWRfZGFydC5zaCIKICBmaQoKICAjIGJ1aWxkCiAgRVhFPSJidWlsZC9jbGkuZXhlIgogIHByaW50ZiAtLSAiLSBHZXR0aW5nIGRlcGVuZGVuY2llc1xuIgogIHNldCAtZQogICIke0RBUlR9IiBwdWIgZ2V0CiAgc2V0ICtlCiAgcHJpbnRmIC0tICJcMDMzWzFBXDAzM1syS+KclCBHZXR0aW5nIGRlcGVuZGVuY2llc1xuIgogIHByaW50ZiAtLSAiLSBCdW5kbGluZyBhc3NldHNcbiIKICBybSAiJHtFWEV9IgogIG1rZGlyIC1wIGJ1aWxkCiAgcHJpbnRmIC0tICJcMDMzWzFBXDAzM1syS+KclCBCdW5kbGluZyBhc3NldHNcbiIKICBwcmludGYgLS0gIi0gQ29tcGlsaW5nIHNpZGVraWNrIGNsaVxuIgogIHNldCAtZQogICIke0RBUlR9IiBjb21waWxlIGV4ZSAtbyAiJHtFWEV9IiBiaW4vbWFpbi5kYXJ0CiAgc2V0ICtlCiAgcHJpbnRmIC0tICJcMDMzWzFBXDAzM1syS+KclCBDb21waWxpbmcgc2lkZWtpY2sgY2xpXG4iCgpjZCAiJHtDV0R9IiB8fCBleGl0Cg==",
      "type": "text"
    },
    {
      "path": "tool/run.sh",
      "data":
          "IyEvdXNyL2Jpbi9lbnYgYmFzaApzZXQgLWUKCiMgQXR0ZW1wdCB0byBzZXQgVE9PTF9IT01FCiMgUmVzb2x2ZSBsaW5rczogJDAgbWF5IGJlIGEgbGluawpQUkc9IiQwIgojIE5lZWQgdGhpcyBmb3IgcmVsYXRpdmUgc3ltbGlua3MuCndoaWxlIFsgLWggIiRQUkciIF07IGRvCiAgbHM9JChscyAtbGQgIiRQUkciKQogIGxpbms9JChleHByICIkbHMiIDogJy4qLT4gXCguKlwpJCcpCiAgaWYgZXhwciAiJGxpbmsiIDogJy8uKicgPi9kZXYvbnVsbDsgdGhlbgogICAgUFJHPSIkbGluayIKICBlbHNlCiAgICBQUkc9JChkaXJuYW1lICIkUFJHIikiLyRsaW5rIgogIGZpCmRvbmUKU0FWRUQ9IiQocHdkKSIKY2QgIiQoZGlybmFtZSAiJFBSRyIpLyIgPi9kZXYvbnVsbApUT09MX0hPTUU9IiQocHdkIC1QKSIKY2QgIiRTQVZFRCIgPi9kZXYvbnVsbAoKZXhwb3J0IFNJREVLSUNLX1BBQ0tBR0VfSE9NRT0kKGRpcm5hbWUgIiRUT09MX0hPTUUiKQoKUkVQT19ST09UPSQoZ2l0IC1DICIkVE9PTF9IT01FIiByZXYtcGFyc2UgLS1zaG93LWNkdXApCkRBUlRfU0RLPSIke1NJREVLSUNLX1BBQ0tBR0VfSE9NRX0vYnVpbGQvY2FjaGUvZGFydC1zZGsiCkRBUlQ9IiREQVJUX1NESy9iaW4vZGFydCIKCgojIyBSdW4gd2l0aG91dCBjb21waWxhdGlvbgojIiR7REFSVH0iICIke1NJREVLSUNLX1BBQ0tBR0VfSE9NRX0vYmluL21haW4uZGFydCIgIiRAIgoKSEFTSF9QUk9HUkFNPSdzaGExc3VtJwpPUz0iJCh1bmFtZSAtcykiCmlmIFtbICRPUyA9fiBEYXJ3aW4uKiBdXTsgdGhlbgogIEhBU0hfUFJPR1JBTT0ic2hhc3VtIgpmaQoKU1RBTVBfRklMRT0iJHtTSURFS0lDS19QQUNLQUdFX0hPTUV9L2J1aWxkL2NsaS5zdGFtcCIKSEFTSD0kKGZpbmQgXAogICIke1NJREVLSUNLX1BBQ0tBR0VfSE9NRX0vYmluIiBcCiAgIiR7U0lERUtJQ0tfUEFDS0FHRV9IT01FfS9saWIiIFwKICAiJHtTSURFS0lDS19QQUNLQUdFX0hPTUV9L3Rvb2wiIFwKICAiJHtTSURFS0lDS19QQUNLQUdFX0hPTUV9L3B1YnNwZWMueWFtbCIgXAogICIke1NJREVLSUNLX1BBQ0tBR0VfSE9NRX0vcHVic3BlYy5sb2NrIiBcCiAgLXR5cGUgZiAtcHJpbnQwIHwgeGFyZ3MgLTAgIiRIQVNIX1BST0dSQU0iKQpFWElTVElOR19IQVNIPSQoY2F0ICRTVEFNUF9GSUxFKSB8fCB0cnVlCgppZiBbICIkSEFTSCIgIT0gIiRFWElTVElOR19IQVNIIiBdOyB0aGVuCiAgIyBkaWZmZXJlbnQgaGFzaCwgcmVjb21waWxlCiAgc2ggIiR7U0lERUtJQ0tfUEFDS0FHRV9IT01FfS90b29sL2luc3RhbGwuc2giCiAgZWNobyAiJEhBU0giID4gIiRTVEFNUF9GSUxFIgpmaQoKRVhFPSIke1NJREVLSUNLX1BBQ0tBR0VfSE9NRX0vYnVpbGQvY2xpLmV4ZSIKIiR7RVhFfSIgIiRAIg==",
      "type": "text"
    }
  ],
  "hooks": [],
  "name": "package",
  "description": "Creates the sidekick cli package",
  "version": "1.0.0",
  "vars": {
    "name": {"type": "string"},
    "hasMainProject": {"type": "boolean"},
    "mainProjectPath": {"type": "string"},
    "mainProjectIsRoot": {"type": "boolean"}
  }
});
